;setting bx value to global variables number
	push 0
	pop bx

;calling main
	call main:
	push ax
	out
	hlt

jmp skip_fibonachi:
fibonachi:
        ;if condition
                push [bx + 0] ;num
                push 2
                ja _cmp_t_0:
                push 0  ;true
                jmp _cmp_t_end_0:

                _cmp_t_0:
                push 1  ;false
                _cmp_t_end_0:

        

        push 0
        je skip_if_1:
        ;if body
                ;assignment to fib_n
                        ;START CALLING fibonachi
                        ;saving BX
                        push bx

                        ;function parameters
                                push [bx + 0] ;num
                                push 1
                                sub
                        

                        ;incrementing bx
                        push bx
                        push 1
                        add
                        pop bx

                        ;pushing arguments to function
                        pop [bx + 0]
                        

                        call fibonachi:
                        

                        ;resetting bx
                        pop bx
                        ;pushing return value to stack
                        push ax

                        pop [bx + 1] ;fib_n
                ;assignment to fib_nn
                        ;START CALLING fibonachi
                        ;saving BX
                        push bx

                        ;function parameters
                                push [bx + 0] ;num
                                push 2
                                sub
                        

                        ;incrementing bx
                        push bx
                        push 2
                        add
                        pop bx

                        ;pushing arguments to function
                        pop [bx + 0]
                        

                        call fibonachi:
                        

                        ;resetting bx
                        pop bx
                        ;pushing return value to stack
                        push ax

                        pop [bx + 2] ;fib_nn
                push [bx + 1] ;fib_n
                push [bx + 2] ;fib_nn
                add
                pop ax
                ret
        skip_if_1:
        

        push 1
        pop ax
        ret
skip_fibonachi:

jmp skip_main:
main:
        ;assignment to num
                push 10
                pop [bx + 0] ;num
        ;assignment to iters
                push 100000
                pop [bx + 1] ;iters
        ;assignment to result
                push 0
                pop [bx + 2] ;result
        _while_start_2:
        ;while condition
                push [bx + 1] ;iters
        

        push 0
        je _skip_while_2:
        ;while body
                ;assignment to result
                        ;START CALLING fibonachi
                        ;saving BX
                        push bx

                        ;function parameters
                                push [bx + 0] ;num
                        

                        ;incrementing bx
                        push bx
                        push 3
                        add
                        pop bx

                        ;pushing arguments to function
                        pop [bx + 0]
                        

                        call fibonachi:
                        

                        ;resetting bx
                        pop bx
                        ;pushing return value to stack
                        push ax

                        pop [bx + 2] ;result
                ;assignment to iters
                        push [bx + 1] ;iters
                        push 1
                        sub
                        pop [bx + 1] ;iters
        

        jmp _while_start_2:
        _skip_while_2:
        

        push [bx + 2] ;result
        out
        push 0
        pop ax
        ret
skip_main:

